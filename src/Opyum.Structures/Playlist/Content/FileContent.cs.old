using System;
using System.IO;
using Opyum.Structures.FileSupport;
using NAudio.Wave;
using System.Threading.Tasks;
using System.Threading;

namespace Opyum.Structures.Playlist
{
    [Opyum.Structures.Attributes.Content(SourceType.File, "Audio file stream loaded into the memory.")]
    public class FileContent : IContent, IDisposable
    {
        #region Excessive Data For Backup Purposes

        /// <summary>
        /// The file path of the audio from <see cref="IFileFromMemoryStream"/> loaded into the memory.
        /// </summary>
        //public string SourcePath { get; internal protected set; }

        /// <summary>
        /// The file path of the audio from <see cref="IFileFromMemoryStream"/> loaded into the memory.
        /// </summary>
        //public string OriginalSourcePath { get; internal protected set; }

        /// <summary>
        /// The duration of the item.
        /// <para>(for a <see cref="System.IO.Stream"/> it's set to 0.)</para>
        /// </summary>
        //public TimeSpan Duration { get; internal protected set; }



        /// <summary>
        /// The <see cref="PlaylistItem"/> type.
        /// </summary>
        //public ContentType ContentType { get => ContentType.File; }

        /// <summary>
        /// The state of the content.
        /// </summary>
        //public ContentStatus State
        //{
        //    get
        //    {
        //        return _state;
        //    }
        //    private set
        //    {
        //        _state = value;
        //        StateChanged?.Invoke(this, new EventArgs());
        //    }
        //}
        //private ContentStatus _state = 0;

        /// <summary>
        /// Audio file information
        /// </summary>
        //public AudioInfo AudioInfo { get; internal protected set; }

        /// <summary>
        /// The object tasked with turning the raw audio data into audio samples & additional functionality.
        /// </summary>
        //public ContentResolver ContentResolver { get; protected set; }



        /// <summary>
        /// Event raised by state change.
        /// </summary>
        //public event EventHandler StateChanged;


        #endregion

        ///////////////////////////////////////////////////////////////////////////////////    LINKED TO VOLUMECURVE    ///////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// The duration of the item.
        /// <para>(or to be more precise, for a <see cref="System.IO.Stream"/>, after what <see cref="TimeSpan"/> of playing should the item stop.)</para>
        /// </summary>
        public TimeSpan Duration { get => VolumeCurve.Duration; set => VolumeCurve.Duration = value; }
        ///////////////////////////////////////////////////////////////////////////////////    LINKED TO VOLUMECURVE    ///////////////////////////////////////////////////////////////////////////////////
        
        /// <summary>
        /// The type of item duration (SET or DYNAMIC)
        /// </summary>
        public DurationType DurationType { get; set; } = 0;

        /// <summary>
        /// The point in the song where the audio starts.
        /// <para>This should be ignored if the <see cref="IContent"/> is a <see cref="System.IO.Stream"/>.</para>
        /// </summary>
        public TimeSpan Begining { get; set; }

        /// <summary>
        /// The curve determening the volume of the audio while playing.
        /// </summary>
        public VolumeCurve VolumeCurve { get; set; }

        /// <summary>
        /// The <see cref="IFileFromMemoryStream"/> that contains the full file loaded into the memory.
        /// </summary>
        public IFileFromMemoryStream FileMemoryStream { get => _fileMemoryStream; internal protected set { _fileMemoryStream = value; /*OnContentChange();*/ } }
        protected IFileFromMemoryStream _fileMemoryStream = null;

        /// <summary>
        /// Returns the <see cref="FileStream"/> form of the <see cref="IFileFromMemoryStream"/>.
        /// </summary>
        public Stream FileStream { get => (Status & ContentStatus.LoadingDataToMemory) == ContentStatus.LoadingDataToMemory ? new FileStream(Source, FileMode.Open) : FileMemoryStream.GetStream(); }  //needs change



        /// <summary>
        /// Used to monitor canges in the file.
        /// </summary>
        virtual public IWatcher Watcher { get; internal protected set; }




        /// <summary>
        /// Returns the <see cref="WaveFormat"/> from the file stream.   
        /// </summary>
        public WaveFormat Format { get { if(_format == null) { _format = new WaveFormat(new BinaryReader(FileStream)); } return _format;} internal protected set => _format = value; }

        public ContentInterpreter ContentInterpreter { get; protected set; }

        public AudioInfo AudioInfo { get; protected set; }

        public SourceType SourceType { get; protected set; }

        public ContentStatus Status { get; protected set; }

        public string Source { get => _sourcePath; protected set { _sourcePath = value; LoadAsync(); OnChange(); } }
        protected string _sourcePath = null;

        public string OriginalSourcePath { get; protected set; }

        private WaveFormat _format;


        /// <summary>
        /// Event raised by state change.
        /// </summary>
        public event EventHandler StateChanged;

        /// <summary>
        /// Triggered on content change
        /// </summary>
        public event EventHandler ContentChanged;


        protected FileContent()
        {
            Load();
        }

        protected FileContent(string source) : this()
        {
            Status = ContentStatus.Preloading;

            this.OriginalSourcePath = source;
            this._sourcePath = source;
            
            Status = ContentStatus.Preloaded;
        }

        ~FileContent()
        {
            Dispose();
        }

        /// <summary>
        /// Load the data using a <see cref="Task.Run(Action)"/> to call the <see cref="LoadAsync"/> method into the memory.
        /// </summary>
        private void Load()
        {
            Task.Run(() => LoadAsync());
        }

        /// <summary>
        /// Load the data into the memory asynchronously
        /// </summary>
        private async void LoadAsync()
        {
            await Task.Run(() =>
            {
                Status = ContentStatus.LoadingDataToMemory;
                
                LoadToMemory();
                LoadAudioInformation();
                Duration = GetDuration();
                ContentInterpreter = ContentInterpreter.AssignContentResolver();
                ContentInterpreter.Setup(Source);
                SourceType = SourceType.File;
                VolumeCurve = VolumeCurve.CreateDefault(Duration);
                AudioInfo = AudioInfo.Generate(this);

                Status = ContentStatus.Ready;
            });
        }

        /// <summary>
        /// Use to trigger change event with default EventArgs
        /// </summary>
        protected void OnChange()
        {
            ContentChanged?.Invoke(this, new EventArgs());
        }


        /// <summary>
        /// Adds a sample converter to the instance.
        /// </summary>
        /// <param name="converter"></param>
        public void AddContentResolver(ContentInterpreter resolver) => ContentInterpreter = resolver;

        /// <summary>
        /// Loads the file into the memory from the current SourcePath.
        /// </summary>
        protected virtual void LoadToMemory()
        {
            try
            {
                _fileMemoryStream?.Dispose();
                _fileMemoryStream = FileFromMemoryStream.Create(Source);
            }
            catch
            {

            }
        }

        protected virtual void LoadAudioInformation()
        {

        }


        /// <summary>
        /// Gets the current duration of the audio file.
        /// <para>UNFINISHED</para>
        /// </summary>
        /// <returns></returns>
        private TimeSpan GetDuration()
        {
            throw new NotImplementedException();
        }


        #region Garbage_Collection

        public void Dispose()
        {
            this.Status = ContentStatus.Disposing;
            Dispose(true);
            GC.Collect();
            this.Status = ContentStatus.Disposed;
        }

        private void Dispose(bool disposing)
        {
            if (disposing)
            {
                _format = null;
                _fileMemoryStream = null;
                ContentChanged = null;
                StateChanged = null; 
            }
        }

        #endregion


        /// <summary>
        /// Creates and returns a new <see cref="FileContent"/> 
        /// </summary>
        /// <param name="file">The full path</param>
        /// <returns></returns>
        public static IContent Create(string file) => new FileContent(file);
    }
}
using System;
using System.IO;
using System.Security;
using System.Threading;

namespace Opyum.Structures
{
    /// <summary>
    /// Used for caching files into memory
    /// </summary>
    public class FileFromMemoryStream : Stream, IDisposable, IFileFromMemoryStream
    {
        MemoryStream memoryStream;
        protected long _position = 0;
        protected byte[] memoryBuffer = new byte[0];
        protected int tempBufferSize = 1024 * 4;

        Object load_lock = new Object();

        public BufferingStatus BufferingState { get; private set; } = 0;
        public string FilePath { get; private set; } = String.Empty;
        public FileInfo FileInformation { get; set; }


        /// <summary>
        /// Returns boolen true if stream can be read
        /// </summary>
        public override bool CanRead => true;
        /// <summary>
        /// Returns boolen true if stream can seek
        /// </summary>
        public override bool CanSeek => true;
        /// <summary>
        /// Returns boolen true if stream can be written
        /// </summary>
        public override bool CanWrite => true;
        /// <summary>
        /// Returns the number of bytes buffered in the memory
        /// </summary>
        public override long Length => memoryBuffer == null ? 0 : memoryBuffer.Length;
        /// <summary>
        /// Gets or sets the current position (the current byte) in the memory buffer
        /// </summary>
        public override long Position { get => _position; set => _position = value; }
        /// <summary>
        /// Gets or sets percentage of the current position in the buffer
        /// </summary>
        public double Percentage
        {
            get => Length == 0 ? 0 : (double)Position / (double)Length;
            set
            {
                if (memoryBuffer != null && Length != 0)
                {
                    _position = (long)(value * (double)Length);
                }

            }
        }
        /// <summary>
        /// Return true if the buffer is empty
        /// </summary>
        public bool BufferEmpty => memoryBuffer == null ? true : memoryBuffer.Length > 1024 * 64 ? false : true;

        protected FileFromMemoryStream()
        {

        }

        ~FileFromMemoryStream()
        {
            Dispose();
        }


        /// <summary>Returns the internal buffer.</summary>
        public virtual byte[] GetBuffer() => memoryBuffer;



        /// <summary>
        /// Reads the cached data from the memory into the buffer.
        /// </summary>
        /// <param name="buffer">The buffer the data is being coppied to.</param>
        /// <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
        /// <param name="count">The maximum number of bytes to be read from the current stream.</param>
        /// <exception cref="ArgumentNullException"/>
        /// <exception cref="ArgumentOutOfRangeException"/>
        public override int Read(byte[] buffer, int offset, int count)
        {
            return memoryStream.Read(buffer, offset, count);
        }

        /// <summary>
        /// Does nothing.
        /// </summary>
        public override void Flush() { }

        /// <summary>Sets the current position of the stream.
        /// <para>Positive and negative offsets are acceptable in differet contexts.</para>
        /// <para>If the position overshoots, it will be corrected to the stream's end.</para>
        /// <para>If the position undershoots, it will be corrected to the stream's start.</para>
        /// </summary>
        /// <param name="offset"></param>
        /// <param name="origin"></param>
        /// <returns></returns>
        public override long Seek(long offset, SeekOrigin origin)
        {
            return memoryStream.Seek(offset, origin);
        }

        /// <summary>
        /// Loads the file into the memory buffer.
        /// </summary>
        /// <param name="file">the file path.</param>
        /// <exception cref="Exception">Unhandled exceptions</exception>
        /// <exception cref="ArgumentNullException"></exception>
        protected virtual void Load(string file)
        {
            FilePath = file;
            if (file == null)
            {
                throw new ArgumentNullException();
            }

            FileInformation = new FileInfo(file);

            lock (load_lock)
            {
                int point = 0;
                byte[] tempBuffer = new byte[tempBufferSize];
                int readBytes = 0;

                memoryBuffer = new byte[FileInformation.Length];
                memoryStream = new MemoryStream(memoryBuffer);

                BufferingState = BufferingStatus.Buffering;

                #region Dynamic_Loading_Into_Memory

                MemoryStream ms = new MemoryStream(memoryBuffer);
                ms.Flush();
                using (Stream fs = new FileStream(file, FileMode.Open, FileAccess.Read))
                {
                    BufferingState = BufferingStatus.Buffering;
                    do
                    {
                        readBytes = fs.Read(tempBuffer, 0, tempBufferSize);
                        if (readBytes != 0)
                        {
                            ms.Write(tempBuffer, 0, readBytes);
                            point += readBytes;
                        }
                    } while (readBytes > 0);
                    tempBuffer = null;
                }
                BufferingState = BufferingStatus.Done;

                ms.Dispose();
                GC.Collect();

                #endregion
            }
        }



        #region Garbage_Collection

        /// <summary>
        /// Disposes of resources.
        /// </summary>
        public new void Dispose()
        {
            Dispose(true);
            GC.Collect();
        }

        /// <summary>
        /// Will be called when the <see cref="Dispose()"/> function is called.
        /// </summary>
        /// <param name="disposing"></param>
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                memoryBuffer = null;
                FilePath = null;
                FileInformation = null;
                load_lock = null;
                memoryStream.Dispose();
            }
        }

        #endregion

        #region NOT_SUPPORTED

        /// <summary>
        /// This function is not supported
        /// </summary>
        /// <param name="value"></param>
        /// <exception cref="NotSupportedException">Will always throw an exception</exception>
        public override void SetLength(long value) => throw new NotSupportedException("Can't set length of a FileMemoryCacheStream");

        /// <summary>
        /// Function not supported.
        /// </summary>
        public override void Write(byte[] buffer, int offset, int count) => throw new NotSupportedException("You cannot alter the source, change/write to the FileMemoryCacheStream.");


        /*
        /// <summary>
        /// Writes the data from the <paramref name="buffer"/> to an array in the memory, and resizes the array if necessary.
        /// </summary>
        /// <param name="buffer">The buffer from which the data is being coppied from.</param>
        /// <param name="offset">The ofset in the <paramref name="buffer"/> from which to start copying the data from.</param>
        /// <param name="count">The number of bytes to copy from <paramref name="buffer"/>.</param>
        /// <exception cref="ArgumentNullException"/>
        /// <exception cref="NotSupportedException"/>
        /// <exception cref="ArgumentException"/>
        /// <exception cref="ArgumentOutOfRangeException"/>
        /// <exception cref="IOException"/>
        /// <exception cref="ObjectDisposedException"/>
        //public override void Write(byte[] buffer, int offset, int count)
        //{
        //    MemoryStream ms = new MemoryStream(memoryBuffer);
        //    ms.Position = _position;
        //    ms.Write(buffer, offset, count);
        //    ms.Dispose();
        //    ms = null;
        //}
        */


        #endregion




        /// <summary>
        /// Creates a new <see cref="FileFromMemoryStream"/> from a given filepath.
        /// </summary>
        /// <param name="file">The audio file. It's not checked for being and actual audio file. That's on you</param>
        /// <returns><see cref="FileFromMemoryStream"/></returns>
        /// <exception cref="FileNotFoundException"></exception>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <exception cref="SecurityException"></exception>
        /// <exception cref="UnauthorizedAccessException"></exception>
        /// <exception cref="PathTooLongException"></exception>
        /// <exception cref="NotSupportedException"></exception>
        /// <exception cref="IOException"></exception>
        public static FileFromMemoryStream Create(string file)
        {
            if (file == null)
            {
                throw new ArgumentNullException();
            }
            if (!File.Exists(file))
            {
                throw new FileNotFoundException();
            }
            var info = new FileInfo(file);
            if (info.Length == 0)
            {
                throw new IOException(message: "File is empty");
            }

            var temp = new FileFromMemoryStream();
            ThreadPool.QueueUserWorkItem((i) => temp.Load(file));
            Thread.Sleep(50);
            //temp.Load(file);
            return temp;
        }
    }
}
